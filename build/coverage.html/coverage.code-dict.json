{"/home/travis/build/npmtest/node-npmtest-phantomjs2/test.js":"/* istanbul instrument in package npmtest_phantomjs2 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-phantomjs2/lib.npmtest_phantomjs2.js":"/* istanbul instrument in package npmtest_phantomjs2 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_phantomjs2 = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_phantomjs2 = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-phantomjs2/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-phantomjs2 && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_phantomjs2 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_phantomjs2\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_phantomjs2.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_phantomjs2.rollup.js'] =\n            local.assetsDict['/assets.npmtest_phantomjs2.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_phantomjs2.__dirname + '/lib.npmtest_phantomjs2.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-phantomjs2/node_modules/phantomjs2/lib/phantomjs.js":"// Copyright 2013 The Obvious Corporation.\r\n\r\n/**\r\n * @fileoverview Helpers made available via require('phantomjs') once package is\r\n * installed.\r\n */\r\n\r\nvar fs = require('fs')\r\nvar path = require('path')\r\nvar which = require('which')\r\n\r\n\r\n/**\r\n * Where the phantom binary can be found.\r\n * @type {string}\r\n */\r\ntry {\r\n  exports.path = path.resolve(__dirname, require('./location').location)\r\n} catch(e) {\r\n  // Must be running inside install script.\r\n  exports.path = null\r\n}\r\n\r\n\r\n/**\r\n * The version of phantomjs installed by this package.\r\n * @type {number}\r\n */\r\nexports.version = '2.1.1'\r\n\r\n\r\n/**\r\n * Returns a clean path that helps avoid `which` finding bin files installed\r\n * by NPM for this repo.\r\n * @param {string} path\r\n * @return {string}\r\n */\r\nexports.cleanPath = function (path) {\r\n  return path\r\n      .replace(/:[^:]*node_modules[^:]*/g, '')\r\n      .replace(/(^|:)\\.\\/bin(\\:|$)/g, ':')\r\n      .replace(/^:+/, '')\r\n      .replace(/:+$/, '')\r\n}\r\n\r\n\r\n// Make sure the binary is executable.  For some reason doing this inside\r\n// install does not work correctly, likely due to some NPM step.\r\nif (exports.path) {\r\n  try {\r\n    // avoid touching the binary if it's already got the correct permissions\r\n    var st = fs.statSync(exports.path);\r\n    var mode = st.mode | 0555;\r\n    if (mode !== st.mode) {\r\n      fs.chmodSync(exports.path, mode);\r\n    }\r\n  } catch (e) {\r\n    // Just ignore error if we don't have permission.\r\n    // We did our best. Likely because phantomjs was already installed.\r\n  }\r\n}\r\n","/home/travis/build/npmtest/node-npmtest-phantomjs2/node_modules/phantomjs2/lib/location.js":"module.exports.location = \"phantom/bin/phantomjs\"","/home/travis/build/npmtest/node-npmtest-phantomjs2/node_modules/phantomjs2/install.js":"// Copyright 2012 The Obvious Corporation.\r\n\r\n/*\r\n * This simply fetches the right version of phantom for the current platform.\r\n */\r\n\r\n'use strict'\r\n\r\nvar requestProgress = require('request-progress')\r\nvar progress = require('progress')\r\nvar AdmZip = require('adm-zip')\r\nvar cp = require('child_process')\r\nvar fs = require('fs-extra')\r\nvar glob = require('glob')\r\nvar helper = require('./lib/phantomjs')\r\nvar kew = require('kew')\r\nvar mkdirp = require('mkdirp')\r\nvar npmconf = require('npmconf')\r\nvar path = require('path')\r\nvar request = require('request')\r\nvar os = require('os')\r\nvar url = require('url')\r\nvar which = require('which')\r\n\r\n\r\nvar originalPath = process.env.PATH\r\n\r\n// If the process exits without going through exit(), then we did not complete.\r\nvar validExit = false\r\n\r\nprocess.on('exit', function () {\r\n  if (!validExit) {\r\n    console.log('Install exited unexpectedly')\r\n    exit(1)\r\n  }\r\n})\r\n\r\n// NPM adds bin directories to the path, which will cause `which` to find the\r\n// bin for this package not the actual phantomjs bin.  Also help out people who\r\n// put ./bin on their path\r\nprocess.env.PATH = helper.cleanPath(originalPath)\r\n\r\nvar libPath = path.join(__dirname, 'lib')\r\nvar pkgPath = path.join(libPath, 'phantom', 'bin')\r\nvar phantomPath = null\r\nvar tmpPath = null\r\n\r\nvar npmConfPromise = kew.nfcall(npmconf.load)\r\n\r\n// If the user manually installed PhantomJS, we want\r\n// to use the existing version.\r\n//\r\n// Do not re-use a manually-installed PhantomJS with\r\n// a different version.\r\n//\r\n// Do not re-use an npm-installed PhantomJS, because\r\n// that can lead to weird circular dependencies between\r\n// local versions and global versions.\r\n// https://github.com/Obvious/phantomjs/issues/85\r\n// https://github.com/Medium/phantomjs/pull/184\r\nkew.resolve(true)\r\n  .then(function () {\r\n    return tryPhantomjsOnPath()\r\n  })\r\n  .then(function () {\r\n    return downloadPhantomjs()\r\n  })\r\n  .then(function (downloadedFile) {\r\n    return extractDownload(downloadedFile)\r\n  })\r\n  .then(function (extractedPath) {\r\n    return copyIntoPlace(extractedPath, pkgPath)\r\n  })\r\n  .then(function () {\r\n    var location = process.platform === 'win32' ?\r\n        path.join(pkgPath, 'phantomjs.exe') :\r\n        path.join(pkgPath, 'phantomjs')\r\n\r\n    try {\r\n      // Ensure executable is executable by all users\r\n      fs.chmodSync(location, '755')\r\n    } catch (err) {\r\n      if (err.code == 'ENOENT') {\r\n        console.error('chmod failed: phantomjs was not successfully copied to', location)\r\n        exit(1)\r\n      }\r\n      throw err\r\n    }\r\n\r\n    var relativeLocation = path.relative(libPath, location)\r\n    writeLocationFile(relativeLocation)\r\n\r\n    console.log('Done. Phantomjs binary available at', location)\r\n    exit(0)\r\n  })\r\n  .fail(function (err) {\r\n    console.error('Phantom installation failed', err, err.stack)\r\n    exit(1)\r\n  })\r\n\r\n\r\nfunction writeLocationFile(location) {\r\n  console.log('Writing location.js file')\r\n  if (process.platform === 'win32') {\r\n    location = location.replace(/\\\\/g, '\\\\\\\\')\r\n  }\r\n  fs.writeFileSync(path.join(libPath, 'location.js'),\r\n      'module.exports.location = \"' + location + '\"')\r\n}\r\n\r\nfunction exit(code) {\r\n  validExit = true\r\n  process.env.PATH = originalPath\r\n  process.exit(code || 0)\r\n}\r\n\r\n\r\nfunction findSuitableTempDirectory(npmConf) {\r\n  var now = Date.now()\r\n  var candidateTmpDirs = [\r\n    process.env.TEMP || process.env.TMPDIR || npmConf.get('tmp'),\r\n    '/tmp',\r\n    path.join(process.cwd(), 'tmp')\r\n  ]\r\n\r\n  for (var i = 0; i < candidateTmpDirs.length; i++) {\r\n    var candidatePath = path.join(candidateTmpDirs[i], 'phantomjs')\r\n\r\n    try {\r\n      fs.mkdirsSync(candidatePath, '0777')\r\n      // Make double sure we have 0777 permissions; some operating systems\r\n      // default umask does not allow write by default.\r\n      fs.chmodSync(candidatePath, '0777')\r\n      var testFile = path.join(candidatePath, now + '.tmp')\r\n      fs.writeFileSync(testFile, 'test')\r\n      fs.unlinkSync(testFile)\r\n      return candidatePath\r\n    } catch (e) {\r\n      console.log(candidatePath, 'is not writable:', e.message)\r\n    }\r\n  }\r\n\r\n  console.error('Can not find a writable tmp directory, please report issue ' +\r\n      'on https://github.com/Obvious/phantomjs/issues/59 with as much ' +\r\n      'information as possible.')\r\n  exit(1)\r\n}\r\n\r\n\r\nfunction getRequestOptions(conf) {\r\n  var strictSSL = conf.get('strict-ssl')\r\n  if (process.version == 'v0.10.34') {\r\n    console.log('Node v0.10.34 detected, turning off strict ssl due to https://github.com/joyent/node/issues/8894')\r\n    strictSSL = false\r\n  }\r\n\r\n\r\n  var options = {\r\n    uri: getDownloadUrl(),\r\n    encoding: null, // Get response as a buffer\r\n    followRedirect: true, // The default download path redirects to a CDN URL.\r\n    headers: {},\r\n    strictSSL: strictSSL\r\n  }\r\n\r\n  var proxyUrl = conf.get('https-proxy') || conf.get('http-proxy') || conf.get('proxy')\r\n  if (proxyUrl) {\r\n\r\n    // Print using proxy\r\n    var proxy = url.parse(proxyUrl)\r\n    if (proxy.auth) {\r\n      // Mask password\r\n      proxy.auth = proxy.auth.replace(/:.*$/, ':******')\r\n    }\r\n    console.log('Using proxy ' + url.format(proxy))\r\n\r\n    // Enable proxy\r\n    options.proxy = proxyUrl\r\n\r\n    // If going through proxy, use the user-agent string from the npm config\r\n    options.headers['User-Agent'] = conf.get('user-agent')\r\n  }\r\n\r\n  // Use certificate authority settings from npm\r\n  var ca = conf.get('ca')\r\n  if (ca) {\r\n    console.log('Using npmconf ca')\r\n    options.ca = ca\r\n  }\r\n\r\n  return options\r\n}\r\n\r\n\r\nfunction requestBinary(requestOptions, filePath) {\r\n  var deferred = kew.defer()\r\n\r\n  var writePath = filePath + '-download-' + Date.now()\r\n\r\n  console.log('Receiving...')\r\n  var bar = null\r\n  requestProgress(request(requestOptions, function (error, response, body) {\r\n    console.log('')\r\n    if (!error && response.statusCode === 200) {\r\n      fs.writeFileSync(writePath, body)\r\n      console.log('Received ' + Math.floor(body.length / 1024) + 'K total.')\r\n      fs.renameSync(writePath, filePath)\r\n      deferred.resolve(filePath)\r\n\r\n    } else if (response) {\r\n      console.error('Error requesting archive.\\n' +\r\n          'Status: ' + response.statusCode + '\\n' +\r\n          'Request options: ' + JSON.stringify(requestOptions, null, 2) + '\\n' +\r\n          'Response headers: ' + JSON.stringify(response.headers, null, 2) + '\\n' +\r\n          'Make sure your network and proxy settings are correct.\\n\\n' +\r\n          'If you continue to have issues, please report this full log at ' +\r\n          'https://github.com/Medium/phantomjs')\r\n      exit(1)\r\n    } else if (error && error.stack && error.stack.indexOf('SELF_SIGNED_CERT_IN_CHAIN') != -1) {\r\n      console.error('Error making request, SELF_SIGNED_CERT_IN_CHAIN. Please read https://github.com/Medium/phantomjs#i-am-behind-a-corporate-proxy-that-uses-self-signed-ssl-certificates-to-intercept-encrypted-traffic')\r\n      exit(1)\r\n    } else if (error) {\r\n      console.error('Error making request.\\n' + error.stack + '\\n\\n' +\r\n          'Please report this full log at https://github.com/Medium/phantomjs')\r\n      exit(1)\r\n    } else {\r\n      console.error('Something unexpected happened, please report this full ' +\r\n          'log at https://github.com/Medium/phantomjs')\r\n      exit(1)\r\n    }\r\n  })).on('progress', function (state) {\r\n    if (!bar) {\r\n      bar = new progress('  [:bar] :percent :etas', {total: state.total, width: 40})\r\n    }\r\n    bar.curr = state.received\r\n    bar.tick(0)\r\n  })\r\n\r\n  return deferred.promise\r\n}\r\n\r\n\r\nfunction extractDownload(filePath) {\r\n  var deferred = kew.defer()\r\n  // extract to a unique directory in case multiple processes are\r\n  // installing and extracting at once\r\n  var extractedPath = filePath + '-extract-' + Date.now()\r\n  var options = {cwd: extractedPath}\r\n\r\n  fs.mkdirsSync(extractedPath, '0777')\r\n  // Make double sure we have 0777 permissions; some operating systems\r\n  // default umask does not allow write by default.\r\n  fs.chmodSync(extractedPath, '0777')\r\n\r\n  if (filePath.substr(-4) === '.zip') {\r\n    console.log('Extracting zip contents')\r\n\r\n    try {\r\n      var zip = new AdmZip(filePath)\r\n      zip.extractAllTo(extractedPath, true)\r\n      deferred.resolve(extractedPath)\r\n    } catch (err) {\r\n      console.error('Error extracting zip')\r\n      deferred.reject(err)\r\n    }\r\n\r\n  } else {\r\n    console.log('Extracting tar contents (via spawned process)')\r\n    cp.execFile('tar', ['jxf', filePath], options, function (err) {\r\n      if (err) {\r\n        console.error('Error extracting archive')\r\n        deferred.reject(err)\r\n      } else {\r\n        deferred.resolve(extractedPath)\r\n      }\r\n    })\r\n  }\r\n  return deferred.promise\r\n}\r\n\r\nfunction copyIntoPlace(extractedPath, targetPath) {\r\n  mkdirp.sync(targetPath)\r\n\r\n  var files = glob.sync(path.join(extractedPath, '**', 'phantomjs?(.exe)'))\r\n  console.log(files)\r\n\r\n  if (!files.length) {\r\n    console.log('Could not find extracted file, or too many matches!', files)\r\n    throw new Error('Could not find extracted file, or too many matches!')\r\n  }\r\n\r\n  for (var i = 0; i < files.length; i++) {\r\n    var file = files[i]\r\n\r\n    if (fs.statSync(file).isFile()) {\r\n      console.log('Copying extracted folder', file, '->', targetPath)\r\n      var dest = path.join(targetPath, path.basename(file))\r\n      if (fs.existsSync(dest))\r\n        fs.removeSync(dest)\r\n\r\n      return kew.nfcall(fs.move, file, dest)\r\n    }\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * Check to see if the binary on PATH is OK to use. If successful, exit the process.\r\n */\r\nfunction tryPhantomjsOnPath() {\r\n  return kew.nfcall(which, 'phantomjs')\r\n  .then(function (result) {\r\n    phantomPath = result\r\n\r\n    // Horrible hack to avoid problems during global install. We check to see if\r\n    // the file `which` found is our own bin script.\r\n    if (phantomPath.indexOf(path.join('npm', 'phantomjs')) !== -1) {\r\n      console.log('Looks like an `npm install -g` on windows; unable to check for already installed version.')\r\n      return\r\n    }\r\n\r\n    var contents = fs.readFileSync(phantomPath, 'utf8')\r\n    if (/NPM_INSTALL_MARKER/.test(contents)) {\r\n      console.log('Looks like an `npm install -g`; unable to check for already installed version.')\r\n    } else {\r\n      return checkPhantomjsVersion(phantomPath).then(function (matches) {\r\n        if (matches) {\r\n          writeLocationFile(phantomPath)\r\n          console.log('PhantomJS is already installed at', phantomPath + '.')\r\n          exit(0)\r\n        }\r\n      })\r\n    }\r\n  }, function () {\r\n    console.log('PhantomJS not found on PATH')\r\n  })\r\n  .fail(function (err) {\r\n    console.error('Error checking path, continuing', err)\r\n    return false\r\n  })\r\n}\r\n\r\n\r\n\r\n/**\r\n * @return {?string} Get the download URL for phantomjs. May return null if no download url exists.\r\n */\r\nfunction getDownloadUrl() {\r\n  var downloadUrl = process.env.npm_config_phantomjs_downloadurl || process.env.PHANTOMJS_DOWNLOADURL\r\n  if (downloadUrl)\r\n    return downloadUrl\r\n\r\n  var cdnUrl = process.env.npm_config_phantomjs_cdnurl ||\r\n      process.env.PHANTOMJS_CDNURL ||\r\n      'https://bitbucket.org/ariya/phantomjs/downloads'\r\n\r\n  downloadUrl = cdnUrl + '/phantomjs-' + helper.version + '-'\r\n\r\n  if (process.platform === 'linux' && process.arch === 'x64') {\r\n    downloadUrl += 'linux-x86_64.tar.bz2'\r\n  } else if (process.platform === 'linux' && process.arch == 'ia32') {\r\n    downloadUrl += 'linux-i686.tar.bz2'\r\n  } else if (process.platform === 'darwin' || process.platform === 'openbsd' || process.platform === 'freebsd') {\r\n    downloadUrl += 'macosx.zip'\r\n\r\n    // workaround for os-x yosemite, where ariya's build is broken\r\n    // see https://github.com/ariya/phantomjs/issues/12928\r\n    if (parseInt(os.release()) >= 14)\r\n      downloadUrl = 'https://github.com/eugene1g/phantomjs/releases/download/2.0.0-bin/phantomjs-2.0.0-macosx.zip'\r\n\r\n  } else if (process.platform === 'win32') {\r\n    downloadUrl += 'windows.zip'\r\n  } else {\r\n    return null\r\n  }\r\n\r\n  return downloadUrl\r\n}\r\n\r\n/**\r\n * Download phantomjs, reusing the existing copy on disk if available.\r\n * Exits immediately if there is no binary to download.\r\n */\r\nfunction downloadPhantomjs() {\r\n  var downloadUrl = getDownloadUrl()\r\n  if (!downloadUrl) {\r\n    console.error(\r\n        'Unexpected platform or architecture: ' + process.platform + '/' + process.arch + '\\n' +\r\n        'It seems there is no binary available for your platform/architecture\\n' +\r\n        'Try to install PhantomJS globally')\r\n    exit(1)\r\n  }\r\n\r\n  return npmConfPromise.then(function (conf) {\r\n    tmpPath = findSuitableTempDirectory(conf)\r\n\r\n    // Can't use a global version so start a download.\r\n    var fileName = downloadUrl.split('/').pop()\r\n    var downloadedFile = path.join(tmpPath, fileName)\r\n\r\n    // Start the install.\r\n    if (!fs.existsSync(downloadedFile)) {\r\n      console.log('Downloading', downloadUrl)\r\n      console.log('Saving to', downloadedFile)\r\n      return requestBinary(getRequestOptions(conf), downloadedFile)\r\n    } else {\r\n      console.log('Download already available at', downloadedFile)\r\n      return downloadedFile\r\n    }\r\n  })\r\n}\r\n\r\n/**\r\n * Check to make sure a given binary is the right version.\r\n * @return {kew.Promise.<boolean>}\r\n */\r\nfunction checkPhantomjsVersion(phantomPath) {\r\n  console.log('Found PhantomJS at', phantomPath, '...verifying')\r\n  return kew.nfcall(cp.execFile, phantomPath, ['--version']).then(function (stdout) {\r\n    var version = stdout.trim()\r\n    if (helper.version == version) {\r\n      return true\r\n    } else {\r\n      console.log('PhantomJS detected, but wrong version', stdout.trim(), '@', phantomPath + '.')\r\n      return false\r\n    }\r\n  }).fail(function (err) {\r\n    console.error('Error verifying phantomjs, continuing', err)\r\n    return false\r\n  })\r\n}\r\n"}